# Creation and deposition of grains into a box under gravity. You can use the energies of the system as a rough indicator 
# of the state of the sample of grains.
#
# Some commands are specific to LIGGGHTS, but most are from LAMMPS. LIGGGHTS is basically LAMMPS but extended
#
# Refer to the Manual that should be in the doc directory after installation (Manual.html) - it should explain the commands
#
# This is an initial script - please contact g.marketos or cath.osullivan  @ imperial.ac.uk if you need something more.
#
# We did not know how big you wanted the simulations to be. We have started running a simulation with 5700 grains as this takes a few minutes to run (the simulations stop when the translational kinetic energy falls below a specific value).
# You can easily vary the number of grains and so the time it takes to run the simulations by decreasing the diameter of the grains and so increasing the number of grains created inside the pre-defined volume of space.
#In order to do this you need to change the following 4 lines.
#
#

#decrease the grain diameter to be used so as to increase the number of grains that can fit the specified volume
variable        Natoms equal 5700*1^3  # multiply by 2^3, 3^3, 4^3 etc
variable        minDiameter  equal 0.002/1.0 # and divide minDiameter by 2.0 or 3.0 or 4.0 
variable        energylimit equal 5.7e-8*1.0^3 # and multiply energylimit by 2.0^3 or 3.0^3 or 4.0^3..




variable        tstep  equal 0.00001 # Timestep should be chosen carefully for stability- the critical timestep depends on the contact parameters and mass of grains, so if chosen small enough there should be no problem


# no other change needed..

variable        maxDiameter  equal 2.0*${minDiameter}


atom_style	granular
atom_modify	map array # this defines how the local atom index is stored - change to hash for larger simulations?
boundary	m m m  # m:non-periodic p: periodic boundary
newton		off

communicate	single vel yes

units		si

region		reg block -0.005 0.065 -0.005 0.065 -0.05 0.15 units box  # defines a geometric region of space
# (it's name is reg,        xlo  xhi   ylo  yhi zlo zhi)

create_box	1 reg  # use region reg as the simulation domain in space

neighbor	0.002 bin #sets the distance which triggers the creation of new neighbour pairs 
neigh_modify	delay 0

# Specify now Material properties (LIGGGHTS pair styles)

# fix       name of fix, name of atoms it applies to, style of fix, arguments used by particular style
# type property/global written especially for LIGGGHTS?

fix 		m1 all property/global youngsModulus peratomtype 5.e6 
fix 		m2 all property/global poissonsRatio peratomtype 0.45
fix 		m3 all property/global coefficientRestitution peratomtypepair 1 0.3
fix 		m4 all property/global coefficientFriction peratomtypepair 1 0.5


#New pair style in LIGGGHTS (non-existent in LAMMPS)
pair_style 	gran/hertz/history 1 0
pair_coeff	* *

timestep	${tstep}

fix		gravi all gravity 9.81 vector 0.0 0.0 -1.0 # 9.81 vertically downwards

fix		zwalls all wall/gran/hertz/history 1 0 zplane 0.0 NULL 1 # fix name is zwalls, all grains can touch it, of type ..., damping and cohesion flags


#I want rigid walls presumably.. do periodic later on???? - need to change region limits above if changing wall locations
fix		xwalls all wall/gran/hertz/history 1 0 xplane 0.0 0.06 1  # change positions of lower (0.0) and upper plane (0.06) - change region limits above too!!!
fix		ywalls all wall/gran/hertz/history 1 0 yplane 0.0 0.06 1  # change positions of lower (0.0) and upper plane (0.06) - change region limits above too!!!


# insertion of grains


region		bc block 0.0  0.06  0.0  0.06  0.0 0.12 units box  # region of space needed for pour command

group		nve_group region reg # Identify atoms inside reg as belonging to a group with name nve_group
fix		ins nve_group pour ${Natoms} 1 1 vol 0.7 1000 diam uniform ${minDiameter} ${maxDiameter} dens uniform 2650 2650 vel uniform 0. 0. 0. 0. -0.1 region bc

#  fix      name of fix , group of atoms it applies to, of type pour, number of grains, type of atoms, seed for random number generator (+ve integer), vol, desired volume fraction, max attempts to achieve this , diam, dens, vel, uniform, vxlow, vxhigh, vylow, vyhigh, vz


#apply nve integration to all particles that are inserted as single particles
fix		integr nve_group nve/sphere



#output settings, include total energy
compute		1 all ke
compute         2 all erotate/sphere
thermo_style	custom step atoms c_1 c_2 # output linear kinetic and rotational kinetic energies (defined as c_1, c_2 by computes above)
thermo		1000 # every 1000 tsteps
thermo_modify	lost ignore norm no
compute_modify	thermo_temp dynamic yes

#insert the first particles so that dump is not empty
run		1

# creates an output file- comment next line out if not necessary
# dump    dmp all custom 1000 dump.file  id type type x y z ix iy iz vx vy vz fx fy fz omegax omegay omegaz radius 

variable        k equal  "c_1"  # translational kinetic energy
variable        m equal  "c_2"  # rotational kinetic energy

# fix             extra all print 1000 "$k   $m" file energies.txt  # also comment out if not necessary

#insert particles
run		4999
unfix		ins

run             30000
